; ModuleID = 'trace_logger.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.gzFile_s = type { i32, i8*, i64 }

@initp = global i8 0, align 1
@inst_count = global i32 0, align 4
@.str = private unnamed_addr constant [27 x i8] c"%%%% LABEL MAP START %%%%\0A\00", align 1
@.str.1 = private unnamed_addr constant [26 x i8] c"%%%% LABEL MAP END %%%%\0A\0A\00", align 1
@full_trace_file = common global %struct.gzFile_s* null, align 8
@.str.2 = private unnamed_addr constant [17 x i8] c"dynamic_trace.gz\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.4 = private unnamed_addr constant [39 x i8] c"Failed to open logfile \22dynamic_trace\22\00", align 1
@current_toplevel_function = common global i8* null, align 8
@current_logging_status = common global i32 0, align 4
@.str.5 = private unnamed_addr constant [71 x i8] c"0 && \22Returning from within a toplevel function before it was called!\22\00", align 1
@.str.6 = private unnamed_addr constant [15 x i8] c"trace_logger.c\00", align 1
@__PRETTY_FUNCTION__.log_or_not = private unnamed_addr constant [53 x i8] c"logging_status log_or_not(_Bool, _Bool, int, char *)\00", align 1
@.str.7 = private unnamed_addr constant [65 x i8] c"0 && \22Cannot call a top level function from within another one!\22\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"0x\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"%02x\00", align 1
@.str.10 = private unnamed_addr constant [30 x i8] c"Stopping logging at inst %d.\0A\00", align 1
@.str.11 = private unnamed_addr constant [31 x i8] c"Starting to log at inst = %d.\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"\0Aentry,%s,%d,\0A\00", align 1
@.str.13 = private unnamed_addr constant [22 x i8] c"\0A0,%d,%s,%s,%s,%d,%d\0A\00", align 1
@.str.14 = private unnamed_addr constant [11 x i8] c"initp == 1\00", align 1
@__PRETTY_FUNCTION__.trace_logger_log_int = private unnamed_addr constant [71 x i8] c"void trace_logger_log_int(int, int, int64_t, int, char *, int, char *)\00", align 1
@.str.15 = private unnamed_addr constant [12 x i8] c"r,%d,%ld,%d\00", align 1
@.str.16 = private unnamed_addr constant [12 x i8] c"f,%d,%ld,%d\00", align 1
@.str.17 = private unnamed_addr constant [13 x i8] c"%d,%d,%ld,%d\00", align 1
@.str.18 = private unnamed_addr constant [4 x i8] c",%s\00", align 1
@.str.19 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.20 = private unnamed_addr constant [6 x i8] c",%s,\0A\00", align 1
@.str.21 = private unnamed_addr constant [3 x i8] c",\0A\00", align 1
@__PRETTY_FUNCTION__.trace_logger_log_ptr = private unnamed_addr constant [72 x i8] c"void trace_logger_log_ptr(int, int, uint64_t, int, char *, int, char *)\00", align 1
@.str.22 = private unnamed_addr constant [14 x i8] c"r,%d,%#llx,%d\00", align 1
@.str.23 = private unnamed_addr constant [14 x i8] c"f,%d,%#llx,%d\00", align 1
@.str.24 = private unnamed_addr constant [15 x i8] c"%d,%d,%#llx,%d\00", align 1
@__PRETTY_FUNCTION__.trace_logger_log_double = private unnamed_addr constant [73 x i8] c"void trace_logger_log_double(int, int, double, int, char *, int, char *)\00", align 1
@.str.25 = private unnamed_addr constant [11 x i8] c"r,%d,%f,%d\00", align 1
@.str.26 = private unnamed_addr constant [11 x i8] c"f,%d,%f,%d\00", align 1
@.str.27 = private unnamed_addr constant [12 x i8] c"%d,%d,%f,%d\00", align 1
@__PRETTY_FUNCTION__.trace_logger_log_vector = private unnamed_addr constant [76 x i8] c"void trace_logger_log_vector(int, int, uint8_t *, int, char *, int, char *)\00", align 1
@.str.28 = private unnamed_addr constant [11 x i8] c"r,%d,%s,%d\00", align 1
@.str.29 = private unnamed_addr constant [11 x i8] c"f,%d,%s,%d\00", align 1
@.str.30 = private unnamed_addr constant [12 x i8] c"%d,%d,%s,%d\00", align 1

; Function Attrs: noinline nounwind uwtable
define void @trace_logger_write_labelmap(i8* %labelmap_buf, i64 %labelmap_size) #0 !dbg !13 {
  tail call void @llvm.dbg.value(metadata i8* %labelmap_buf, i64 0, metadata !20, metadata !158), !dbg !159
  tail call void @llvm.dbg.value(metadata i64 %labelmap_size, i64 0, metadata !21, metadata !158), !dbg !160
  %1 = load i8, i8* @initp, align 1, !dbg !161, !tbaa !163, !range !167
  %2 = icmp eq i8 %1, 0, !dbg !161
  br i1 %2, label %3, label %4, !dbg !168

; <label>:3                                       ; preds = %0
  tail call void @trace_logger_init(), !dbg !169
  store i8 1, i8* @initp, align 1, !dbg !171, !tbaa !163
  br label %4, !dbg !172

; <label>:4                                       ; preds = %0, %3
  tail call void @llvm.dbg.value(metadata !29, i64 0, metadata !22, metadata !158), !dbg !173
  tail call void @llvm.dbg.value(metadata !29, i64 0, metadata !25, metadata !158), !dbg !174
  %5 = load %struct.gzFile_s*, %struct.gzFile_s** @full_trace_file, align 8, !dbg !175, !tbaa !176
  %6 = tail call i32 @gzwrite(%struct.gzFile_s* %5, i8* nonnull getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0), i32 26) #8, !dbg !178
  %7 = load %struct.gzFile_s*, %struct.gzFile_s** @full_trace_file, align 8, !dbg !180, !tbaa !176
  %8 = trunc i64 %labelmap_size to i32, !dbg !181
  %9 = tail call i32 @gzwrite(%struct.gzFile_s* %7, i8* %labelmap_buf, i32 %8) #8, !dbg !182
  %10 = load %struct.gzFile_s*, %struct.gzFile_s** @full_trace_file, align 8, !dbg !183, !tbaa !176
  %11 = tail call i32 @gzwrite(%struct.gzFile_s* %10, i8* nonnull getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0), i32 25) #8, !dbg !184
  ret void, !dbg !185
}

; Function Attrs: nounwind readnone
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare i32 @gzwrite(%struct.gzFile_s*, i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define void @trace_logger_init() #0 !dbg !26 {
  %1 = tail call %struct.gzFile_s* @gzopen(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)) #8, !dbg !186
  store %struct.gzFile_s* %1, %struct.gzFile_s** @full_trace_file, align 8, !dbg !187, !tbaa !176
  %2 = icmp eq %struct.gzFile_s* %1, null, !dbg !188
  br i1 %2, label %3, label %4, !dbg !190

; <label>:3                                       ; preds = %0
  tail call void @perror(i8* nonnull getelementptr inbounds ([39 x i8], [39 x i8]* @.str.4, i64 0, i64 0)) #9, !dbg !191
  tail call void @exit(i32 -1) #10, !dbg !193
  unreachable, !dbg !193

; <label>:4                                       ; preds = %0
  %5 = tail call noalias i8* @calloc(i64 512, i64 1) #8, !dbg !194
  store i8* %5, i8** @current_toplevel_function, align 8, !dbg !195, !tbaa !176
  store i32 2, i32* @current_logging_status, align 4, !dbg !196, !tbaa !197
  %6 = tail call i32 @atexit(void ()* nonnull @trace_logger_fin) #8, !dbg !198
  ret void, !dbg !199
}

declare %struct.gzFile_s* @gzopen(i8*, i8*) #2

; Function Attrs: nounwind
declare void @perror(i8* nocapture readonly) #3

; Function Attrs: noreturn nounwind
declare void @exit(i32) #4

; Function Attrs: nounwind
declare noalias i8* @calloc(i64, i64) #3

; Function Attrs: nounwind
declare i32 @atexit(void ()*) #3

; Function Attrs: noinline nounwind uwtable
define void @trace_logger_fin() #0 !dbg !30 {
  %1 = load i8*, i8** @current_toplevel_function, align 8, !dbg !200, !tbaa !176
  tail call void @free(i8* %1) #8, !dbg !201
  %2 = load %struct.gzFile_s*, %struct.gzFile_s** @full_trace_file, align 8, !dbg !202, !tbaa !176
  %3 = tail call i32 @gzclose(%struct.gzFile_s* %2) #8, !dbg !203
  ret void, !dbg !204
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) #3

declare i32 @gzclose(%struct.gzFile_s*) #2

; Function Attrs: noinline nounwind uwtable
define i32 @log_or_not(i1 zeroext %is_toplevel_mode, i1 zeroext %is_toplevel_function, i32 %opcode, i8* nocapture readonly %current_function) #0 !dbg !31 {
  tail call void @llvm.dbg.value(metadata i1 %is_toplevel_mode, i64 0, metadata !38, metadata !205), !dbg !206
  tail call void @llvm.dbg.value(metadata i1 %is_toplevel_function, i64 0, metadata !39, metadata !205), !dbg !207
  tail call void @llvm.dbg.value(metadata i32 %opcode, i64 0, metadata !40, metadata !158), !dbg !208
  tail call void @llvm.dbg.value(metadata i8* %current_function, i64 0, metadata !41, metadata !158), !dbg !209
  br i1 %is_toplevel_mode, label %3, label %1, !dbg !210

; <label>:1                                       ; preds = %0
  %2 = select i1 %is_toplevel_function, i32 1, i32 2, !dbg !211
  br label %16, !dbg !213

; <label>:3                                       ; preds = %0
  br i1 %is_toplevel_function, label %6, label %4, !dbg !214

; <label>:4                                       ; preds = %3
  %5 = load i32, i32* @current_logging_status, align 4, !dbg !215, !tbaa !197
  br label %16, !dbg !217

; <label>:6                                       ; preds = %3
  %7 = icmp eq i32 %opcode, 1, !dbg !218
  br i1 %7, label %8, label %16, !dbg !220

; <label>:8                                       ; preds = %6
  %9 = load i8*, i8** @current_toplevel_function, align 8, !dbg !221, !tbaa !176
  %strlenfirst = load i8, i8* %9, align 1, !dbg !223
  %10 = icmp eq i8 %strlenfirst, 0, !dbg !224
  br i1 %10, label %11, label %12, !dbg !225

; <label>:11                                      ; preds = %8
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([71 x i8], [71 x i8]* @.str.5, i64 0, i64 0), i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0), i32 118, i8* nonnull getelementptr inbounds ([53 x i8], [53 x i8]* @__PRETTY_FUNCTION__.log_or_not, i64 0, i64 0)) #10, !dbg !226
  unreachable, !dbg !226

; <label>:12                                      ; preds = %8
  %13 = tail call i32 @strcmp(i8* %current_function, i8* %9) #11, !dbg !227
  %14 = icmp eq i32 %13, 0, !dbg !229
  br i1 %14, label %16, label %15, !dbg !230

; <label>:15                                      ; preds = %12
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([65 x i8], [65 x i8]* @.str.7, i64 0, i64 0), i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0), i32 123, i8* nonnull getelementptr inbounds ([53 x i8], [53 x i8]* @__PRETTY_FUNCTION__.log_or_not, i64 0, i64 0)) #10, !dbg !231
  unreachable, !dbg !231

; <label>:16                                      ; preds = %12, %6, %4, %1
  %.0 = phi i32 [ %5, %4 ], [ %2, %1 ], [ 1, %6 ], [ 0, %12 ]
  ret i32 %.0, !dbg !232
}

; Function Attrs: noreturn nounwind
declare void @__assert_fail(i8*, i8*, i32, i8*) #4

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) #5

; Function Attrs: noinline nounwind uwtable
define void @convert_bytes_to_hex(i8* nocapture %buf, i8* nocapture readonly %value, i32 %size) #0 !dbg !42 {
  tail call void @llvm.dbg.value(metadata i8* %buf, i64 0, metadata !50, metadata !158), !dbg !233
  tail call void @llvm.dbg.value(metadata i8* %value, i64 0, metadata !51, metadata !158), !dbg !234
  tail call void @llvm.dbg.value(metadata i32 %size, i64 0, metadata !52, metadata !158), !dbg !235
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %buf, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0), i64 3, i32 1, i1 false), !dbg !236
  %1 = getelementptr inbounds i8, i8* %buf, i64 2, !dbg !237
  tail call void @llvm.dbg.value(metadata i8* %1, i64 0, metadata !50, metadata !158), !dbg !233
  tail call void @llvm.dbg.value(metadata i32 0, i64 0, metadata !53, metadata !158), !dbg !238
  %2 = icmp sgt i32 %size, 0, !dbg !239
  br i1 %2, label %.lr.ph, label %._crit_edge, !dbg !243

.lr.ph:                                           ; preds = %0, %.lr.ph
  %indvars.iv = phi i64 [ %indvars.iv.next, %.lr.ph ], [ 0, %0 ]
  %.01 = phi i8* [ %8, %.lr.ph ], [ %1, %0 ]
  %3 = getelementptr inbounds i8, i8* %value, i64 %indvars.iv, !dbg !244
  %4 = load i8, i8* %3, align 1, !dbg !244, !tbaa !197
  %5 = zext i8 %4 to i32, !dbg !244
  %6 = tail call i32 (i8*, i8*, ...) @sprintf(i8* %.01, i8* nonnull getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 0), i32 %5) #8, !dbg !246
  %7 = sext i32 %6 to i64, !dbg !247
  %8 = getelementptr inbounds i8, i8* %.01, i64 %7, !dbg !247
  tail call void @llvm.dbg.value(metadata i8* %8, i64 0, metadata !50, metadata !158), !dbg !233
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !243
  %lftr.wideiv = trunc i64 %indvars.iv.next to i32, !dbg !243
  %exitcond = icmp eq i32 %lftr.wideiv, %size, !dbg !243
  br i1 %exitcond, label %._crit_edge, label %.lr.ph, !dbg !243

._crit_edge:                                      ; preds = %.lr.ph, %0
  %.0.lcssa = phi i8* [ %1, %0 ], [ %8, %.lr.ph ]
  store i8 0, i8* %.0.lcssa, align 1, !dbg !248, !tbaa !197
  ret void, !dbg !249
}

; Function Attrs: nounwind
declare i32 @sprintf(i8* nocapture, i8* nocapture readonly, ...) #3

; Function Attrs: noinline nounwind uwtable
define void @update_logging_status(i8* nocapture readonly %name, i32 %opcode, i1 zeroext %is_tracked_function, i1 zeroext %is_toplevel_mode) #0 !dbg !54 {
  tail call void @llvm.dbg.value(metadata i8* %name, i64 0, metadata !58, metadata !158), !dbg !250
  tail call void @llvm.dbg.value(metadata i32 %opcode, i64 0, metadata !59, metadata !158), !dbg !251
  tail call void @llvm.dbg.value(metadata i1 %is_tracked_function, i64 0, metadata !60, metadata !205), !dbg !252
  tail call void @llvm.dbg.value(metadata i1 %is_toplevel_mode, i64 0, metadata !61, metadata !205), !dbg !253
  %1 = load i32, i32* @current_logging_status, align 4, !dbg !254, !tbaa !197
  %2 = icmp eq i32 %1, 0, !dbg !256
  br i1 %2, label %3, label %6, !dbg !257

; <label>:3                                       ; preds = %0
  %4 = load i32, i32* @inst_count, align 4, !dbg !258, !tbaa !260
  %5 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([30 x i8], [30 x i8]* @.str.10, i64 0, i64 0), i32 %4), !dbg !262
  store i32 2, i32* @current_logging_status, align 4, !dbg !263, !tbaa !197
  br label %23, !dbg !264

; <label>:6                                       ; preds = %0
  tail call void @llvm.dbg.value(metadata i32 %1, i64 0, metadata !62, metadata !158), !dbg !265
  %7 = tail call i32 @log_or_not(i1 zeroext %is_toplevel_mode, i1 zeroext %is_tracked_function, i32 %opcode, i8* %name), !dbg !266
  store i32 %7, i32* @current_logging_status, align 4, !dbg !267, !tbaa !197
  %8 = icmp ne i32 %1, 2, !dbg !268
  %9 = icmp eq i32 %7, %1, !dbg !270
  %or.cond2 = or i1 %8, %9, !dbg !272
  br i1 %or.cond2, label %13, label %10, !dbg !272

; <label>:10                                      ; preds = %6
  %11 = load i32, i32* @inst_count, align 4, !dbg !273, !tbaa !260
  %12 = tail call i32 (i8*, ...) @printf(i8* nonnull getelementptr inbounds ([31 x i8], [31 x i8]* @.str.11, i64 0, i64 0), i32 %11), !dbg !274
  %.pr = load i32, i32* @current_logging_status, align 4, !dbg !275
  br label %13, !dbg !274

; <label>:13                                      ; preds = %6, %10
  %14 = phi i32 [ %7, %6 ], [ %.pr, %10 ], !dbg !275
  %15 = load i8*, i8** @current_toplevel_function, align 8, !dbg !277, !tbaa !176
  %strlenfirst = load i8, i8* %15, align 1, !dbg !278
  %16 = icmp eq i8 %strlenfirst, 0, !dbg !279
  %17 = icmp eq i32 %14, 1, !dbg !280
  %or.cond = and i1 %17, %16, !dbg !281
  br i1 %or.cond, label %18, label %20, !dbg !281

; <label>:18                                      ; preds = %13
  %19 = tail call i8* @strcpy(i8* %15, i8* %name) #8, !dbg !282
  br label %23, !dbg !284

; <label>:20                                      ; preds = %13
  %21 = icmp eq i32 %14, 0, !dbg !285
  br i1 %21, label %22, label %23, !dbg !288

; <label>:22                                      ; preds = %20
  tail call void @llvm.memset.p0i8.i64(i8* %15, i8 0, i64 512, i32 1, i1 false), !dbg !289
  br label %23, !dbg !291

; <label>:23                                      ; preds = %18, %22, %20, %3
  ret void, !dbg !292
}

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) #3

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8* nocapture readonly) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #6

; Function Attrs: noinline norecurse nounwind readonly uwtable
define zeroext i1 @do_not_log() #7 !dbg !63 {
  %1 = load i32, i32* @current_logging_status, align 4, !dbg !294, !tbaa !197
  %2 = icmp eq i32 %1, 2, !dbg !295
  ret i1 %2, !dbg !296
}

; Function Attrs: noinline nounwind uwtable
define void @trace_logger_log_entry(i8* %func_name, i32 %num_parameters) #0 !dbg !66 {
  tail call void @llvm.dbg.value(metadata i8* %func_name, i64 0, metadata !70, metadata !158), !dbg !297
  tail call void @llvm.dbg.value(metadata i32 %num_parameters, i64 0, metadata !71, metadata !158), !dbg !298
  %1 = load i8, i8* @initp, align 1, !dbg !299, !tbaa !163, !range !167
  %2 = icmp eq i8 %1, 0, !dbg !299
  br i1 %2, label %3, label %4, !dbg !301

; <label>:3                                       ; preds = %0
  tail call void @trace_logger_init(), !dbg !302
  store i8 1, i8* @initp, align 1, !dbg !304, !tbaa !163
  br label %4, !dbg !305

; <label>:4                                       ; preds = %0, %3
  tail call void @update_logging_status(i8* %func_name, i32 0, i1 zeroext true, i1 zeroext true), !dbg !306
  %5 = load i32, i32* @current_logging_status, align 4, !dbg !307, !tbaa !197
  %6 = icmp eq i32 %5, 2, !dbg !309
  br i1 %6, label %10, label %7, !dbg !310

; <label>:7                                       ; preds = %4
  %8 = load %struct.gzFile_s*, %struct.gzFile_s** @full_trace_file, align 8, !dbg !311, !tbaa !176
  %9 = tail call i32 (%struct.gzFile_s*, i8*, ...) @gzprintf(%struct.gzFile_s* %8, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i64 0, i64 0), i8* %func_name, i32 %num_parameters) #8, !dbg !312
  br label %10, !dbg !313

; <label>:10                                      ; preds = %4, %7
  ret void, !dbg !314
}

declare i32 @gzprintf(%struct.gzFile_s*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define void @trace_logger_log0(i32 %line_number, i8* %name, i8* %bbid, i8* %instid, i32 %opcode, i1 zeroext %is_tracked_function, i1 zeroext %is_toplevel_mode) #0 !dbg !72 {
  tail call void @llvm.dbg.value(metadata i32 %line_number, i64 0, metadata !76, metadata !158), !dbg !316
  tail call void @llvm.dbg.value(metadata i8* %name, i64 0, metadata !77, metadata !158), !dbg !317
  tail call void @llvm.dbg.value(metadata i8* %bbid, i64 0, metadata !78, metadata !158), !dbg !318
  tail call void @llvm.dbg.value(metadata i8* %instid, i64 0, metadata !79, metadata !158), !dbg !319
  tail call void @llvm.dbg.value(metadata i32 %opcode, i64 0, metadata !80, metadata !158), !dbg !320
  tail call void @llvm.dbg.value(metadata i1 %is_tracked_function, i64 0, metadata !81, metadata !205), !dbg !321
  tail call void @llvm.dbg.value(metadata i1 %is_toplevel_mode, i64 0, metadata !82, metadata !205), !dbg !322
  %1 = load i8, i8* @initp, align 1, !dbg !323, !tbaa !163, !range !167
  %2 = icmp eq i8 %1, 0, !dbg !323
  br i1 %2, label %3, label %4, !dbg !325

; <label>:3                                       ; preds = %0
  tail call void @trace_logger_init(), !dbg !326
  store i8 1, i8* @initp, align 1, !dbg !328, !tbaa !163
  br label %4, !dbg !329

; <label>:4                                       ; preds = %0, %3
  tail call void @update_logging_status(i8* %name, i32 %opcode, i1 zeroext %is_tracked_function, i1 zeroext %is_toplevel_mode), !dbg !330
  %5 = load i32, i32* @current_logging_status, align 4, !dbg !331, !tbaa !197
  %6 = icmp eq i32 %5, 2, !dbg !333
  br i1 %6, label %13, label %7, !dbg !334

; <label>:7                                       ; preds = %4
  %8 = load %struct.gzFile_s*, %struct.gzFile_s** @full_trace_file, align 8, !dbg !335, !tbaa !176
  %9 = load i32, i32* @inst_count, align 4, !dbg !336, !tbaa !260
  %10 = tail call i32 (%struct.gzFile_s*, i8*, ...) @gzprintf(%struct.gzFile_s* %8, i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.13, i64 0, i64 0), i32 %line_number, i8* %name, i8* %bbid, i8* %instid, i32 %opcode, i32 %9) #8, !dbg !337
  %11 = load i32, i32* @inst_count, align 4, !dbg !338, !tbaa !260
  %12 = add nsw i32 %11, 1, !dbg !338
  store i32 %12, i32* @inst_count, align 4, !dbg !338, !tbaa !260
  br label %13, !dbg !339

; <label>:13                                      ; preds = %4, %7
  ret void, !dbg !340
}

; Function Attrs: noinline nounwind uwtable
define void @trace_logger_log_int(i32 %line, i32 %size, i64 %value, i32 %is_reg, i8* %label, i32 %is_phi, i8* %prev_bbid) #0 !dbg !83 {
  tail call void @llvm.dbg.value(metadata i32 %line, i64 0, metadata !90, metadata !158), !dbg !342
  tail call void @llvm.dbg.value(metadata i32 %size, i64 0, metadata !91, metadata !158), !dbg !343
  tail call void @llvm.dbg.value(metadata i64 %value, i64 0, metadata !92, metadata !158), !dbg !344
  tail call void @llvm.dbg.value(metadata i32 %is_reg, i64 0, metadata !93, metadata !158), !dbg !345
  tail call void @llvm.dbg.value(metadata i8* %label, i64 0, metadata !94, metadata !158), !dbg !346
  tail call void @llvm.dbg.value(metadata i32 %is_phi, i64 0, metadata !95, metadata !158), !dbg !347
  tail call void @llvm.dbg.value(metadata i8* %prev_bbid, i64 0, metadata !96, metadata !158), !dbg !348
  %1 = load i8, i8* @initp, align 1, !dbg !349, !tbaa !163, !range !167
  %2 = icmp eq i8 %1, 0, !dbg !349
  br i1 %2, label %3, label %4, !dbg !349

; <label>:3                                       ; preds = %0
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i64 0, i64 0), i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0), i32 207, i8* nonnull getelementptr inbounds ([71 x i8], [71 x i8]* @__PRETTY_FUNCTION__.trace_logger_log_int, i64 0, i64 0)) #10, !dbg !350
  unreachable, !dbg !350

; <label>:4                                       ; preds = %0
  %5 = tail call zeroext i1 @do_not_log(), !dbg !352
  br i1 %5, label %32, label %6, !dbg !354

; <label>:6                                       ; preds = %4
  %7 = icmp eq i32 %line, 19134, !dbg !355
  br i1 %7, label %8, label %11, !dbg !357

; <label>:8                                       ; preds = %6
  %9 = load %struct.gzFile_s*, %struct.gzFile_s** @full_trace_file, align 8, !dbg !358, !tbaa !176
  %10 = tail call i32 (%struct.gzFile_s*, i8*, ...) @gzprintf(%struct.gzFile_s* %9, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.15, i64 0, i64 0), i32 %size, i64 %value, i32 %is_reg) #8, !dbg !359
  br label %18, !dbg !359

; <label>:11                                      ; preds = %6
  %12 = icmp eq i32 %line, 24601, !dbg !360
  %13 = load %struct.gzFile_s*, %struct.gzFile_s** @full_trace_file, align 8, !dbg !362, !tbaa !176
  br i1 %12, label %14, label %16, !dbg !363

; <label>:14                                      ; preds = %11
  %15 = tail call i32 (%struct.gzFile_s*, i8*, ...) @gzprintf(%struct.gzFile_s* %13, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.16, i64 0, i64 0), i32 %size, i64 %value, i32 %is_reg) #8, !dbg !364
  br label %18, !dbg !364

; <label>:16                                      ; preds = %11
  %17 = tail call i32 (%struct.gzFile_s*, i8*, ...) @gzprintf(%struct.gzFile_s* %13, i8* nonnull getelementptr inbounds ([13 x i8], [13 x i8]* @.str.17, i64 0, i64 0), i32 %line, i32 %size, i64 %value, i32 %is_reg) #8, !dbg !365
  br label %18

; <label>:18                                      ; preds = %14, %16, %8
  %19 = icmp eq i32 %is_reg, 0, !dbg !366
  %20 = load %struct.gzFile_s*, %struct.gzFile_s** @full_trace_file, align 8, !dbg !368, !tbaa !176
  br i1 %19, label %23, label %21, !dbg !369

; <label>:21                                      ; preds = %18
  %22 = tail call i32 (%struct.gzFile_s*, i8*, ...) @gzprintf(%struct.gzFile_s* %20, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i64 0, i64 0), i8* %label) #8, !dbg !370
  br label %25, !dbg !370

; <label>:23                                      ; preds = %18
  %24 = tail call i32 (%struct.gzFile_s*, i8*, ...) @gzprintf(%struct.gzFile_s* %20, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i64 0, i64 0)) #8, !dbg !371
  br label %25

; <label>:25                                      ; preds = %23, %21
  %26 = icmp eq i32 %is_phi, 0, !dbg !372
  %27 = load %struct.gzFile_s*, %struct.gzFile_s** @full_trace_file, align 8, !dbg !374, !tbaa !176
  br i1 %26, label %30, label %28, !dbg !375

; <label>:28                                      ; preds = %25
  %29 = tail call i32 (%struct.gzFile_s*, i8*, ...) @gzprintf(%struct.gzFile_s* %27, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i64 0, i64 0), i8* %prev_bbid) #8, !dbg !376
  br label %32, !dbg !376

; <label>:30                                      ; preds = %25
  %31 = tail call i32 (%struct.gzFile_s*, i8*, ...) @gzprintf(%struct.gzFile_s* %27, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21, i64 0, i64 0)) #8, !dbg !377
  br label %32

; <label>:32                                      ; preds = %4, %30, %28
  ret void, !dbg !378
}

; Function Attrs: noinline nounwind uwtable
define void @trace_logger_log_ptr(i32 %line, i32 %size, i64 %value, i32 %is_reg, i8* %label, i32 %is_phi, i8* %prev_bbid) #0 !dbg !97 {
  tail call void @llvm.dbg.value(metadata i32 %line, i64 0, metadata !102, metadata !158), !dbg !379
  tail call void @llvm.dbg.value(metadata i32 %size, i64 0, metadata !103, metadata !158), !dbg !380
  tail call void @llvm.dbg.value(metadata i64 %value, i64 0, metadata !104, metadata !158), !dbg !381
  tail call void @llvm.dbg.value(metadata i32 %is_reg, i64 0, metadata !105, metadata !158), !dbg !382
  tail call void @llvm.dbg.value(metadata i8* %label, i64 0, metadata !106, metadata !158), !dbg !383
  tail call void @llvm.dbg.value(metadata i32 %is_phi, i64 0, metadata !107, metadata !158), !dbg !384
  tail call void @llvm.dbg.value(metadata i8* %prev_bbid, i64 0, metadata !108, metadata !158), !dbg !385
  %1 = load i8, i8* @initp, align 1, !dbg !386, !tbaa !163, !range !167
  %2 = icmp eq i8 %1, 0, !dbg !386
  br i1 %2, label %3, label %4, !dbg !386

; <label>:3                                       ; preds = %0
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i64 0, i64 0), i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0), i32 228, i8* nonnull getelementptr inbounds ([72 x i8], [72 x i8]* @__PRETTY_FUNCTION__.trace_logger_log_ptr, i64 0, i64 0)) #10, !dbg !387
  unreachable, !dbg !387

; <label>:4                                       ; preds = %0
  %5 = tail call zeroext i1 @do_not_log(), !dbg !389
  br i1 %5, label %32, label %6, !dbg !391

; <label>:6                                       ; preds = %4
  %7 = icmp eq i32 %line, 19134, !dbg !392
  br i1 %7, label %8, label %11, !dbg !394

; <label>:8                                       ; preds = %6
  %9 = load %struct.gzFile_s*, %struct.gzFile_s** @full_trace_file, align 8, !dbg !395, !tbaa !176
  %10 = tail call i32 (%struct.gzFile_s*, i8*, ...) @gzprintf(%struct.gzFile_s* %9, i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.22, i64 0, i64 0), i32 %size, i64 %value, i32 %is_reg) #8, !dbg !396
  br label %18, !dbg !396

; <label>:11                                      ; preds = %6
  %12 = icmp eq i32 %line, 24601, !dbg !397
  %13 = load %struct.gzFile_s*, %struct.gzFile_s** @full_trace_file, align 8, !dbg !399, !tbaa !176
  br i1 %12, label %14, label %16, !dbg !400

; <label>:14                                      ; preds = %11
  %15 = tail call i32 (%struct.gzFile_s*, i8*, ...) @gzprintf(%struct.gzFile_s* %13, i8* nonnull getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i64 0, i64 0), i32 %size, i64 %value, i32 %is_reg) #8, !dbg !401
  br label %18, !dbg !401

; <label>:16                                      ; preds = %11
  %17 = tail call i32 (%struct.gzFile_s*, i8*, ...) @gzprintf(%struct.gzFile_s* %13, i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.24, i64 0, i64 0), i32 %line, i32 %size, i64 %value, i32 %is_reg) #8, !dbg !402
  br label %18

; <label>:18                                      ; preds = %14, %16, %8
  %19 = icmp eq i32 %is_reg, 0, !dbg !403
  %20 = load %struct.gzFile_s*, %struct.gzFile_s** @full_trace_file, align 8, !dbg !405, !tbaa !176
  br i1 %19, label %23, label %21, !dbg !406

; <label>:21                                      ; preds = %18
  %22 = tail call i32 (%struct.gzFile_s*, i8*, ...) @gzprintf(%struct.gzFile_s* %20, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i64 0, i64 0), i8* %label) #8, !dbg !407
  br label %25, !dbg !407

; <label>:23                                      ; preds = %18
  %24 = tail call i32 (%struct.gzFile_s*, i8*, ...) @gzprintf(%struct.gzFile_s* %20, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i64 0, i64 0)) #8, !dbg !408
  br label %25

; <label>:25                                      ; preds = %23, %21
  %26 = icmp eq i32 %is_phi, 0, !dbg !409
  %27 = load %struct.gzFile_s*, %struct.gzFile_s** @full_trace_file, align 8, !dbg !411, !tbaa !176
  br i1 %26, label %30, label %28, !dbg !412

; <label>:28                                      ; preds = %25
  %29 = tail call i32 (%struct.gzFile_s*, i8*, ...) @gzprintf(%struct.gzFile_s* %27, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i64 0, i64 0), i8* %prev_bbid) #8, !dbg !413
  br label %32, !dbg !413

; <label>:30                                      ; preds = %25
  %31 = tail call i32 (%struct.gzFile_s*, i8*, ...) @gzprintf(%struct.gzFile_s* %27, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21, i64 0, i64 0)) #8, !dbg !414
  br label %32

; <label>:32                                      ; preds = %4, %30, %28
  ret void, !dbg !415
}

; Function Attrs: noinline nounwind uwtable
define void @trace_logger_log_double(i32 %line, i32 %size, double %value, i32 %is_reg, i8* %label, i32 %is_phi, i8* %prev_bbid) #0 !dbg !109 {
  tail call void @llvm.dbg.value(metadata i32 %line, i64 0, metadata !114, metadata !158), !dbg !416
  tail call void @llvm.dbg.value(metadata i32 %size, i64 0, metadata !115, metadata !158), !dbg !417
  tail call void @llvm.dbg.value(metadata double %value, i64 0, metadata !116, metadata !158), !dbg !418
  tail call void @llvm.dbg.value(metadata i32 %is_reg, i64 0, metadata !117, metadata !158), !dbg !419
  tail call void @llvm.dbg.value(metadata i8* %label, i64 0, metadata !118, metadata !158), !dbg !420
  tail call void @llvm.dbg.value(metadata i32 %is_phi, i64 0, metadata !119, metadata !158), !dbg !421
  tail call void @llvm.dbg.value(metadata i8* %prev_bbid, i64 0, metadata !120, metadata !158), !dbg !422
  %1 = load i8, i8* @initp, align 1, !dbg !423, !tbaa !163, !range !167
  %2 = icmp eq i8 %1, 0, !dbg !423
  br i1 %2, label %3, label %4, !dbg !423

; <label>:3                                       ; preds = %0
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i64 0, i64 0), i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0), i32 249, i8* nonnull getelementptr inbounds ([73 x i8], [73 x i8]* @__PRETTY_FUNCTION__.trace_logger_log_double, i64 0, i64 0)) #10, !dbg !424
  unreachable, !dbg !424

; <label>:4                                       ; preds = %0
  %5 = tail call zeroext i1 @do_not_log(), !dbg !426
  br i1 %5, label %32, label %6, !dbg !428

; <label>:6                                       ; preds = %4
  %7 = icmp eq i32 %line, 19134, !dbg !429
  br i1 %7, label %8, label %11, !dbg !431

; <label>:8                                       ; preds = %6
  %9 = load %struct.gzFile_s*, %struct.gzFile_s** @full_trace_file, align 8, !dbg !432, !tbaa !176
  %10 = tail call i32 (%struct.gzFile_s*, i8*, ...) @gzprintf(%struct.gzFile_s* %9, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.25, i64 0, i64 0), i32 %size, double %value, i32 %is_reg) #8, !dbg !433
  br label %18, !dbg !433

; <label>:11                                      ; preds = %6
  %12 = icmp eq i32 %line, 24601, !dbg !434
  %13 = load %struct.gzFile_s*, %struct.gzFile_s** @full_trace_file, align 8, !dbg !436, !tbaa !176
  br i1 %12, label %14, label %16, !dbg !437

; <label>:14                                      ; preds = %11
  %15 = tail call i32 (%struct.gzFile_s*, i8*, ...) @gzprintf(%struct.gzFile_s* %13, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.26, i64 0, i64 0), i32 %size, double %value, i32 %is_reg) #8, !dbg !438
  br label %18, !dbg !438

; <label>:16                                      ; preds = %11
  %17 = tail call i32 (%struct.gzFile_s*, i8*, ...) @gzprintf(%struct.gzFile_s* %13, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.27, i64 0, i64 0), i32 %line, i32 %size, double %value, i32 %is_reg) #8, !dbg !439
  br label %18

; <label>:18                                      ; preds = %14, %16, %8
  %19 = icmp eq i32 %is_reg, 0, !dbg !440
  %20 = load %struct.gzFile_s*, %struct.gzFile_s** @full_trace_file, align 8, !dbg !442, !tbaa !176
  br i1 %19, label %23, label %21, !dbg !443

; <label>:21                                      ; preds = %18
  %22 = tail call i32 (%struct.gzFile_s*, i8*, ...) @gzprintf(%struct.gzFile_s* %20, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i64 0, i64 0), i8* %label) #8, !dbg !444
  br label %25, !dbg !444

; <label>:23                                      ; preds = %18
  %24 = tail call i32 (%struct.gzFile_s*, i8*, ...) @gzprintf(%struct.gzFile_s* %20, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i64 0, i64 0)) #8, !dbg !445
  br label %25

; <label>:25                                      ; preds = %23, %21
  %26 = icmp eq i32 %is_phi, 0, !dbg !446
  %27 = load %struct.gzFile_s*, %struct.gzFile_s** @full_trace_file, align 8, !dbg !448, !tbaa !176
  br i1 %26, label %30, label %28, !dbg !449

; <label>:28                                      ; preds = %25
  %29 = tail call i32 (%struct.gzFile_s*, i8*, ...) @gzprintf(%struct.gzFile_s* %27, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i64 0, i64 0), i8* %prev_bbid) #8, !dbg !450
  br label %32, !dbg !450

; <label>:30                                      ; preds = %25
  %31 = tail call i32 (%struct.gzFile_s*, i8*, ...) @gzprintf(%struct.gzFile_s* %27, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21, i64 0, i64 0)) #8, !dbg !451
  br label %32

; <label>:32                                      ; preds = %4, %30, %28
  ret void, !dbg !452
}

; Function Attrs: noinline nounwind uwtable
define void @trace_logger_log_vector(i32 %line, i32 %size, i8* nocapture readonly %value, i32 %is_reg, i8* %label, i32 %is_phi, i8* %prev_bbid) #0 !dbg !121 {
  tail call void @llvm.dbg.value(metadata i32 %line, i64 0, metadata !125, metadata !158), !dbg !453
  tail call void @llvm.dbg.value(metadata i32 %size, i64 0, metadata !126, metadata !158), !dbg !454
  tail call void @llvm.dbg.value(metadata i8* %value, i64 0, metadata !127, metadata !158), !dbg !455
  tail call void @llvm.dbg.value(metadata i32 %is_reg, i64 0, metadata !128, metadata !158), !dbg !456
  tail call void @llvm.dbg.value(metadata i8* %label, i64 0, metadata !129, metadata !158), !dbg !457
  tail call void @llvm.dbg.value(metadata i32 %is_phi, i64 0, metadata !130, metadata !158), !dbg !458
  tail call void @llvm.dbg.value(metadata i8* %prev_bbid, i64 0, metadata !131, metadata !158), !dbg !459
  %1 = load i8, i8* @initp, align 1, !dbg !460, !tbaa !163, !range !167
  %2 = icmp eq i8 %1, 0, !dbg !460
  br i1 %2, label %3, label %4, !dbg !460

; <label>:3                                       ; preds = %0
  tail call void @__assert_fail(i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i64 0, i64 0), i8* nonnull getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0), i32 270, i8* nonnull getelementptr inbounds ([76 x i8], [76 x i8]* @__PRETTY_FUNCTION__.trace_logger_log_vector, i64 0, i64 0)) #10, !dbg !461
  unreachable, !dbg !461

; <label>:4                                       ; preds = %0
  %5 = tail call zeroext i1 @do_not_log(), !dbg !463
  br i1 %5, label %39, label %6, !dbg !465

; <label>:6                                       ; preds = %4
  %7 = sdiv i32 %size, 4, !dbg !466
  %8 = add nsw i32 %7, 3, !dbg !467
  %9 = zext i32 %8 to i64, !dbg !468
  %10 = tail call i8* @llvm.stacksave(), !dbg !468
  %11 = alloca i8, i64 %9, align 16, !dbg !468
  tail call void @llvm.dbg.declare(metadata i8* %11, metadata !132, metadata !469), !dbg !470
  %12 = sdiv i32 %size, 8, !dbg !471
  call void @convert_bytes_to_hex(i8* nonnull %11, i8* %value, i32 %12), !dbg !472
  %13 = icmp eq i32 %line, 19134, !dbg !473
  br i1 %13, label %14, label %17, !dbg !475

; <label>:14                                      ; preds = %6
  %15 = load %struct.gzFile_s*, %struct.gzFile_s** @full_trace_file, align 8, !dbg !476, !tbaa !176
  %16 = call i32 (%struct.gzFile_s*, i8*, ...) @gzprintf(%struct.gzFile_s* %15, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.28, i64 0, i64 0), i32 %size, i8* nonnull %11, i32 %is_reg) #8, !dbg !477
  br label %24, !dbg !477

; <label>:17                                      ; preds = %6
  %18 = icmp eq i32 %line, 24601, !dbg !478
  %19 = load %struct.gzFile_s*, %struct.gzFile_s** @full_trace_file, align 8, !dbg !480, !tbaa !176
  br i1 %18, label %20, label %22, !dbg !481

; <label>:20                                      ; preds = %17
  %21 = call i32 (%struct.gzFile_s*, i8*, ...) @gzprintf(%struct.gzFile_s* %19, i8* nonnull getelementptr inbounds ([11 x i8], [11 x i8]* @.str.29, i64 0, i64 0), i32 %size, i8* nonnull %11, i32 %is_reg) #8, !dbg !482
  br label %24, !dbg !482

; <label>:22                                      ; preds = %17
  %23 = call i32 (%struct.gzFile_s*, i8*, ...) @gzprintf(%struct.gzFile_s* %19, i8* nonnull getelementptr inbounds ([12 x i8], [12 x i8]* @.str.30, i64 0, i64 0), i32 %line, i32 %size, i8* nonnull %11, i32 %is_reg) #8, !dbg !483
  br label %24

; <label>:24                                      ; preds = %20, %22, %14
  %25 = icmp eq i32 %is_reg, 0, !dbg !484
  %26 = load %struct.gzFile_s*, %struct.gzFile_s** @full_trace_file, align 8, !dbg !486, !tbaa !176
  br i1 %25, label %29, label %27, !dbg !487

; <label>:27                                      ; preds = %24
  %28 = call i32 (%struct.gzFile_s*, i8*, ...) @gzprintf(%struct.gzFile_s* %26, i8* nonnull getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i64 0, i64 0), i8* %label) #8, !dbg !488
  br label %31, !dbg !488

; <label>:29                                      ; preds = %24
  %30 = call i32 (%struct.gzFile_s*, i8*, ...) @gzprintf(%struct.gzFile_s* %26, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i64 0, i64 0)) #8, !dbg !489
  br label %31

; <label>:31                                      ; preds = %29, %27
  %32 = icmp eq i32 %is_phi, 0, !dbg !490
  %33 = load %struct.gzFile_s*, %struct.gzFile_s** @full_trace_file, align 8, !dbg !492, !tbaa !176
  br i1 %32, label %36, label %34, !dbg !493

; <label>:34                                      ; preds = %31
  %35 = call i32 (%struct.gzFile_s*, i8*, ...) @gzprintf(%struct.gzFile_s* %33, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i64 0, i64 0), i8* %prev_bbid) #8, !dbg !494
  br label %38, !dbg !494

; <label>:36                                      ; preds = %31
  %37 = call i32 (%struct.gzFile_s*, i8*, ...) @gzprintf(%struct.gzFile_s* %33, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21, i64 0, i64 0)) #8, !dbg !495
  br label %38

; <label>:38                                      ; preds = %36, %34
  call void @llvm.stackrestore(i8* %10), !dbg !496
  br label %39, !dbg !496

; <label>:39                                      ; preds = %4, %38
  ret void, !dbg !497
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #8

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #8

; Function Attrs: nounwind readnone
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #6

attributes #0 = { noinline nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { noinline norecurse nounwind readonly uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { cold }
attributes #10 = { noreturn nounwind }
attributes #11 = { nounwind readonly }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!155, !156}
!llvm.ident = !{!157}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 3.8.0-2ubuntu3~trusty5 (tags/RELEASE_380/final)", isOptimized: true, runtimeVersion: 0, emissionKind: 1, enums: !2, retainedTypes: !8, subprograms: !12, globals: !136)
!1 = !DIFile(filename: "trace_logger.c", directory: "/home/binzhang/llvm/lib/Transforms/Hello/profile-func")
!2 = !{!3}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "_logging_status", file: !1, line: 14, size: 32, align: 32, elements: !4)
!4 = !{!5, !6, !7}
!5 = !DIEnumerator(name: "LOG_AND_STOP", value: 0)
!6 = !DIEnumerator(name: "LOG_AND_CONTINUE", value: 1)
!7 = !DIEnumerator(name: "DO_NOT_LOG", value: 2)
!8 = !{!9, !10}
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64, align: 64)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64, align: 64)
!11 = !DIBasicType(name: "char", size: 8, align: 8, encoding: DW_ATE_signed_char)
!12 = !{!13, !26, !30, !31, !42, !54, !63, !66, !72, !83, !97, !109, !121}
!13 = distinct !DISubprogram(name: "trace_logger_write_labelmap", scope: !1, file: !1, line: 36, type: !14, isLocal: false, isDefinition: true, scopeLine: 36, flags: DIFlagPrototyped, isOptimized: true, variables: !19)
!14 = !DISubroutineType(types: !15)
!15 = !{null, !10, !16}
!16 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !17, line: 62, baseType: !18)
!17 = !DIFile(filename: "/usr/lib/llvm-3.8/bin/../lib/clang/3.8.0/include/stddef.h", directory: "/home/binzhang/llvm/lib/Transforms/Hello/profile-func")
!18 = !DIBasicType(name: "long unsigned int", size: 64, align: 64, encoding: DW_ATE_unsigned)
!19 = !{!20, !21, !22, !25}
!20 = !DILocalVariable(name: "labelmap_buf", arg: 1, scope: !13, file: !1, line: 36, type: !10)
!21 = !DILocalVariable(name: "labelmap_size", arg: 2, scope: !13, file: !1, line: 36, type: !16)
!22 = !DILocalVariable(name: "section_header", scope: !13, file: !1, line: 41, type: !23)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64, align: 64)
!24 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !11)
!25 = !DILocalVariable(name: "section_footer", scope: !13, file: !1, line: 42, type: !23)
!26 = distinct !DISubprogram(name: "trace_logger_init", scope: !1, file: !1, line: 48, type: !27, isLocal: false, isDefinition: true, scopeLine: 48, isOptimized: true, variables: !29)
!27 = !DISubroutineType(types: !28)
!28 = !{null}
!29 = !{}
!30 = distinct !DISubprogram(name: "trace_logger_fin", scope: !1, file: !1, line: 62, type: !27, isLocal: false, isDefinition: true, scopeLine: 62, isOptimized: true, variables: !29)
!31 = distinct !DISubprogram(name: "log_or_not", scope: !1, file: !1, line: 105, type: !32, isLocal: false, isDefinition: true, scopeLine: 106, flags: DIFlagPrototyped, isOptimized: true, variables: !37)
!32 = !DISubroutineType(types: !33)
!33 = !{!34, !35, !35, !36, !10}
!34 = !DIDerivedType(tag: DW_TAG_typedef, name: "logging_status", file: !1, line: 21, baseType: !3)
!35 = !DIBasicType(name: "_Bool", size: 8, align: 8, encoding: DW_ATE_boolean)
!36 = !DIBasicType(name: "int", size: 32, align: 32, encoding: DW_ATE_signed)
!37 = !{!38, !39, !40, !41}
!38 = !DILocalVariable(name: "is_toplevel_mode", arg: 1, scope: !31, file: !1, line: 105, type: !35)
!39 = !DILocalVariable(name: "is_toplevel_function", arg: 2, scope: !31, file: !1, line: 105, type: !35)
!40 = !DILocalVariable(name: "opcode", arg: 3, scope: !31, file: !1, line: 106, type: !36)
!41 = !DILocalVariable(name: "current_function", arg: 4, scope: !31, file: !1, line: 106, type: !10)
!42 = distinct !DISubprogram(name: "convert_bytes_to_hex", scope: !1, file: !1, line: 133, type: !43, isLocal: false, isDefinition: true, scopeLine: 133, flags: DIFlagPrototyped, isOptimized: true, variables: !49)
!43 = !DISubroutineType(types: !44)
!44 = !{null, !10, !45, !36}
!45 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !46, size: 64, align: 64)
!46 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !47, line: 48, baseType: !48)
!47 = !DIFile(filename: "/usr/include/stdint.h", directory: "/home/binzhang/llvm/lib/Transforms/Hello/profile-func")
!48 = !DIBasicType(name: "unsigned char", size: 8, align: 8, encoding: DW_ATE_unsigned_char)
!49 = !{!50, !51, !52, !53}
!50 = !DILocalVariable(name: "buf", arg: 1, scope: !42, file: !1, line: 133, type: !10)
!51 = !DILocalVariable(name: "value", arg: 2, scope: !42, file: !1, line: 133, type: !45)
!52 = !DILocalVariable(name: "size", arg: 3, scope: !42, file: !1, line: 133, type: !36)
!53 = !DILocalVariable(name: "i", scope: !42, file: !1, line: 136, type: !36)
!54 = distinct !DISubprogram(name: "update_logging_status", scope: !1, file: !1, line: 143, type: !55, isLocal: false, isDefinition: true, scopeLine: 144, flags: DIFlagPrototyped, isOptimized: true, variables: !57)
!55 = !DISubroutineType(types: !56)
!56 = !{null, !10, !36, !35, !35}
!57 = !{!58, !59, !60, !61, !62}
!58 = !DILocalVariable(name: "name", arg: 1, scope: !54, file: !1, line: 143, type: !10)
!59 = !DILocalVariable(name: "opcode", arg: 2, scope: !54, file: !1, line: 143, type: !36)
!60 = !DILocalVariable(name: "is_tracked_function", arg: 3, scope: !54, file: !1, line: 143, type: !35)
!61 = !DILocalVariable(name: "is_toplevel_mode", arg: 4, scope: !54, file: !1, line: 144, type: !35)
!62 = !DILocalVariable(name: "temp", scope: !54, file: !1, line: 153, type: !34)
!63 = distinct !DISubprogram(name: "do_not_log", scope: !1, file: !1, line: 169, type: !64, isLocal: false, isDefinition: true, scopeLine: 169, isOptimized: true, variables: !29)
!64 = !DISubroutineType(types: !65)
!65 = !{!35}
!66 = distinct !DISubprogram(name: "trace_logger_log_entry", scope: !1, file: !1, line: 173, type: !67, isLocal: false, isDefinition: true, scopeLine: 173, flags: DIFlagPrototyped, isOptimized: true, variables: !69)
!67 = !DISubroutineType(types: !68)
!68 = !{null, !10, !36}
!69 = !{!70, !71}
!70 = !DILocalVariable(name: "func_name", arg: 1, scope: !66, file: !1, line: 173, type: !10)
!71 = !DILocalVariable(name: "num_parameters", arg: 2, scope: !66, file: !1, line: 173, type: !36)
!72 = distinct !DISubprogram(name: "trace_logger_log0", scope: !1, file: !1, line: 189, type: !73, isLocal: false, isDefinition: true, scopeLine: 190, flags: DIFlagPrototyped, isOptimized: true, variables: !75)
!73 = !DISubroutineType(types: !74)
!74 = !{null, !36, !10, !10, !10, !36, !35, !35}
!75 = !{!76, !77, !78, !79, !80, !81, !82}
!76 = !DILocalVariable(name: "line_number", arg: 1, scope: !72, file: !1, line: 189, type: !36)
!77 = !DILocalVariable(name: "name", arg: 2, scope: !72, file: !1, line: 189, type: !10)
!78 = !DILocalVariable(name: "bbid", arg: 3, scope: !72, file: !1, line: 189, type: !10)
!79 = !DILocalVariable(name: "instid", arg: 4, scope: !72, file: !1, line: 189, type: !10)
!80 = !DILocalVariable(name: "opcode", arg: 5, scope: !72, file: !1, line: 190, type: !36)
!81 = !DILocalVariable(name: "is_tracked_function", arg: 6, scope: !72, file: !1, line: 190, type: !35)
!82 = !DILocalVariable(name: "is_toplevel_mode", arg: 7, scope: !72, file: !1, line: 190, type: !35)
!83 = distinct !DISubprogram(name: "trace_logger_log_int", scope: !1, file: !1, line: 205, type: !84, isLocal: false, isDefinition: true, scopeLine: 206, flags: DIFlagPrototyped, isOptimized: true, variables: !89)
!84 = !DISubroutineType(types: !85)
!85 = !{null, !36, !36, !86, !36, !10, !36, !10}
!86 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !87, line: 197, baseType: !88)
!87 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/types.h", directory: "/home/binzhang/llvm/lib/Transforms/Hello/profile-func")
!88 = !DIBasicType(name: "long int", size: 64, align: 64, encoding: DW_ATE_signed)
!89 = !{!90, !91, !92, !93, !94, !95, !96}
!90 = !DILocalVariable(name: "line", arg: 1, scope: !83, file: !1, line: 205, type: !36)
!91 = !DILocalVariable(name: "size", arg: 2, scope: !83, file: !1, line: 205, type: !36)
!92 = !DILocalVariable(name: "value", arg: 3, scope: !83, file: !1, line: 205, type: !86)
!93 = !DILocalVariable(name: "is_reg", arg: 4, scope: !83, file: !1, line: 205, type: !36)
!94 = !DILocalVariable(name: "label", arg: 5, scope: !83, file: !1, line: 206, type: !10)
!95 = !DILocalVariable(name: "is_phi", arg: 6, scope: !83, file: !1, line: 206, type: !36)
!96 = !DILocalVariable(name: "prev_bbid", arg: 7, scope: !83, file: !1, line: 206, type: !10)
!97 = distinct !DISubprogram(name: "trace_logger_log_ptr", scope: !1, file: !1, line: 226, type: !98, isLocal: false, isDefinition: true, scopeLine: 227, flags: DIFlagPrototyped, isOptimized: true, variables: !101)
!98 = !DISubroutineType(types: !99)
!99 = !{null, !36, !36, !100, !36, !10, !36, !10}
!100 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !47, line: 55, baseType: !18)
!101 = !{!102, !103, !104, !105, !106, !107, !108}
!102 = !DILocalVariable(name: "line", arg: 1, scope: !97, file: !1, line: 226, type: !36)
!103 = !DILocalVariable(name: "size", arg: 2, scope: !97, file: !1, line: 226, type: !36)
!104 = !DILocalVariable(name: "value", arg: 3, scope: !97, file: !1, line: 226, type: !100)
!105 = !DILocalVariable(name: "is_reg", arg: 4, scope: !97, file: !1, line: 226, type: !36)
!106 = !DILocalVariable(name: "label", arg: 5, scope: !97, file: !1, line: 227, type: !10)
!107 = !DILocalVariable(name: "is_phi", arg: 6, scope: !97, file: !1, line: 227, type: !36)
!108 = !DILocalVariable(name: "prev_bbid", arg: 7, scope: !97, file: !1, line: 227, type: !10)
!109 = distinct !DISubprogram(name: "trace_logger_log_double", scope: !1, file: !1, line: 247, type: !110, isLocal: false, isDefinition: true, scopeLine: 248, flags: DIFlagPrototyped, isOptimized: true, variables: !113)
!110 = !DISubroutineType(types: !111)
!111 = !{null, !36, !36, !112, !36, !10, !36, !10}
!112 = !DIBasicType(name: "double", size: 64, align: 64, encoding: DW_ATE_float)
!113 = !{!114, !115, !116, !117, !118, !119, !120}
!114 = !DILocalVariable(name: "line", arg: 1, scope: !109, file: !1, line: 247, type: !36)
!115 = !DILocalVariable(name: "size", arg: 2, scope: !109, file: !1, line: 247, type: !36)
!116 = !DILocalVariable(name: "value", arg: 3, scope: !109, file: !1, line: 247, type: !112)
!117 = !DILocalVariable(name: "is_reg", arg: 4, scope: !109, file: !1, line: 247, type: !36)
!118 = !DILocalVariable(name: "label", arg: 5, scope: !109, file: !1, line: 248, type: !10)
!119 = !DILocalVariable(name: "is_phi", arg: 6, scope: !109, file: !1, line: 248, type: !36)
!120 = !DILocalVariable(name: "prev_bbid", arg: 7, scope: !109, file: !1, line: 248, type: !10)
!121 = distinct !DISubprogram(name: "trace_logger_log_vector", scope: !1, file: !1, line: 268, type: !122, isLocal: false, isDefinition: true, scopeLine: 269, flags: DIFlagPrototyped, isOptimized: true, variables: !124)
!122 = !DISubroutineType(types: !123)
!123 = !{null, !36, !36, !45, !36, !10, !36, !10}
!124 = !{!125, !126, !127, !128, !129, !130, !131, !132}
!125 = !DILocalVariable(name: "line", arg: 1, scope: !121, file: !1, line: 268, type: !36)
!126 = !DILocalVariable(name: "size", arg: 2, scope: !121, file: !1, line: 268, type: !36)
!127 = !DILocalVariable(name: "value", arg: 3, scope: !121, file: !1, line: 268, type: !45)
!128 = !DILocalVariable(name: "is_reg", arg: 4, scope: !121, file: !1, line: 268, type: !36)
!129 = !DILocalVariable(name: "label", arg: 5, scope: !121, file: !1, line: 269, type: !10)
!130 = !DILocalVariable(name: "is_phi", arg: 6, scope: !121, file: !1, line: 269, type: !36)
!131 = !DILocalVariable(name: "prev_bbid", arg: 7, scope: !121, file: !1, line: 269, type: !10)
!132 = !DILocalVariable(name: "value_str", scope: !121, file: !1, line: 273, type: !133)
!133 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, align: 8, elements: !134)
!134 = !{!135}
!135 = !DISubrange(count: -1)
!136 = !{!137, !138, !139, !153, !154}
!137 = !DIGlobalVariable(name: "initp", scope: !0, file: !1, line: 31, type: !35, isLocal: false, isDefinition: true, variable: i8* @initp)
!138 = !DIGlobalVariable(name: "inst_count", scope: !0, file: !1, line: 32, type: !36, isLocal: false, isDefinition: true, variable: i32* @inst_count)
!139 = !DIGlobalVariable(name: "full_trace_file", scope: !0, file: !1, line: 30, type: !140, isLocal: false, isDefinition: true, variable: %struct.gzFile_s** @full_trace_file)
!140 = !DIDerivedType(tag: DW_TAG_typedef, name: "gzFile", file: !141, line: 1224, baseType: !142)
!141 = !DIFile(filename: "/usr/include/zlib.h", directory: "/home/binzhang/llvm/lib/Transforms/Hello/profile-func")
!142 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !143, size: 64, align: 64)
!143 = !DICompositeType(tag: DW_TAG_structure_type, name: "gzFile_s", file: !141, line: 1670, size: 192, align: 64, elements: !144)
!144 = !{!145, !147, !149}
!145 = !DIDerivedType(tag: DW_TAG_member, name: "have", scope: !143, file: !141, line: 1671, baseType: !146, size: 32, align: 32)
!146 = !DIBasicType(name: "unsigned int", size: 32, align: 32, encoding: DW_ATE_unsigned)
!147 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !143, file: !141, line: 1672, baseType: !148, size: 64, align: 64, offset: 64)
!148 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !48, size: 64, align: 64)
!149 = !DIDerivedType(tag: DW_TAG_member, name: "pos", scope: !143, file: !141, line: 1673, baseType: !150, size: 64, align: 64, offset: 128)
!150 = !DIDerivedType(tag: DW_TAG_typedef, name: "off_t", file: !87, line: 86, baseType: !151)
!151 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !152, line: 131, baseType: !88)
!152 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "/home/binzhang/llvm/lib/Transforms/Hello/profile-func")
!153 = !DIGlobalVariable(name: "current_toplevel_function", scope: !0, file: !1, line: 33, type: !10, isLocal: false, isDefinition: true, variable: i8** @current_toplevel_function)
!154 = !DIGlobalVariable(name: "current_logging_status", scope: !0, file: !1, line: 34, type: !34, isLocal: false, isDefinition: true, variable: i32* @current_logging_status)
!155 = !{i32 2, !"Dwarf Version", i32 4}
!156 = !{i32 2, !"Debug Info Version", i32 3}
!157 = !{!"clang version 3.8.0-2ubuntu3~trusty5 (tags/RELEASE_380/final)"}
!158 = !DIExpression()
!159 = !DILocation(line: 36, column: 40, scope: !13)
!160 = !DILocation(line: 36, column: 61, scope: !13)
!161 = !DILocation(line: 37, column: 10, scope: !162)
!162 = distinct !DILexicalBlock(scope: !13, file: !1, line: 37, column: 9)
!163 = !{!164, !164, i64 0}
!164 = !{!"_Bool", !165, i64 0}
!165 = !{!"omnipotent char", !166, i64 0}
!166 = !{!"Simple C/C++ TBAA"}
!167 = !{i8 0, i8 2}
!168 = !DILocation(line: 37, column: 9, scope: !13)
!169 = !DILocation(line: 38, column: 7, scope: !170)
!170 = distinct !DILexicalBlock(scope: !162, file: !1, line: 37, column: 17)
!171 = !DILocation(line: 39, column: 13, scope: !170)
!172 = !DILocation(line: 40, column: 5, scope: !170)
!173 = !DILocation(line: 41, column: 17, scope: !13)
!174 = !DILocation(line: 42, column: 17, scope: !13)
!175 = !DILocation(line: 43, column: 13, scope: !13)
!176 = !{!177, !177, i64 0}
!177 = !{!"any pointer", !165, i64 0}
!178 = !DILocation(line: 43, column: 5, scope: !179)
!179 = !DILexicalBlockFile(scope: !13, file: !1, discriminator: 1)
!180 = !DILocation(line: 44, column: 13, scope: !13)
!181 = !DILocation(line: 44, column: 44, scope: !13)
!182 = !DILocation(line: 44, column: 5, scope: !13)
!183 = !DILocation(line: 45, column: 13, scope: !13)
!184 = !DILocation(line: 45, column: 5, scope: !179)
!185 = !DILocation(line: 46, column: 1, scope: !13)
!186 = !DILocation(line: 49, column: 21, scope: !26)
!187 = !DILocation(line: 49, column: 19, scope: !26)
!188 = !DILocation(line: 51, column: 23, scope: !189)
!189 = distinct !DILexicalBlock(scope: !26, file: !1, line: 51, column: 7)
!190 = !DILocation(line: 51, column: 7, scope: !26)
!191 = !DILocation(line: 52, column: 5, scope: !192)
!192 = distinct !DILexicalBlock(scope: !189, file: !1, line: 51, column: 32)
!193 = !DILocation(line: 53, column: 5, scope: !192)
!194 = !DILocation(line: 56, column: 39, scope: !26)
!195 = !DILocation(line: 56, column: 29, scope: !26)
!196 = !DILocation(line: 57, column: 26, scope: !26)
!197 = !{!165, !165, i64 0}
!198 = !DILocation(line: 59, column: 3, scope: !26)
!199 = !DILocation(line: 60, column: 1, scope: !26)
!200 = !DILocation(line: 63, column: 8, scope: !30)
!201 = !DILocation(line: 63, column: 3, scope: !30)
!202 = !DILocation(line: 64, column: 11, scope: !30)
!203 = !DILocation(line: 64, column: 3, scope: !30)
!204 = !DILocation(line: 65, column: 1, scope: !30)
!205 = !DIExpression(DW_OP_bit_piece, 0, 1)
!206 = !DILocation(line: 105, column: 32, scope: !31)
!207 = !DILocation(line: 105, column: 55, scope: !31)
!208 = !DILocation(line: 106, column: 31, scope: !31)
!209 = !DILocation(line: 106, column: 45, scope: !31)
!210 = !DILocation(line: 107, column: 7, scope: !31)
!211 = !DILocation(line: 108, column: 12, scope: !212)
!212 = distinct !DILexicalBlock(scope: !31, file: !1, line: 107, column: 7)
!213 = !DILocation(line: 108, column: 5, scope: !212)
!214 = !DILocation(line: 110, column: 7, scope: !31)
!215 = !DILocation(line: 111, column: 12, scope: !216)
!216 = distinct !DILexicalBlock(scope: !31, file: !1, line: 110, column: 7)
!217 = !DILocation(line: 111, column: 5, scope: !216)
!218 = !DILocation(line: 113, column: 14, scope: !219)
!219 = distinct !DILexicalBlock(scope: !31, file: !1, line: 113, column: 7)
!220 = !DILocation(line: 113, column: 7, scope: !31)
!221 = !DILocation(line: 116, column: 14, scope: !222)
!222 = distinct !DILexicalBlock(scope: !31, file: !1, line: 116, column: 7)
!223 = !DILocation(line: 116, column: 7, scope: !222)
!224 = !DILocation(line: 116, column: 41, scope: !222)
!225 = !DILocation(line: 116, column: 7, scope: !31)
!226 = !DILocation(line: 117, column: 5, scope: !222)
!227 = !DILocation(line: 120, column: 7, scope: !228)
!228 = distinct !DILexicalBlock(scope: !31, file: !1, line: 120, column: 7)
!229 = !DILocation(line: 120, column: 59, scope: !228)
!230 = !DILocation(line: 120, column: 7, scope: !31)
!231 = !DILocation(line: 123, column: 3, scope: !31)
!232 = !DILocation(line: 127, column: 1, scope: !31)
!233 = !DILocation(line: 133, column: 33, scope: !42)
!234 = !DILocation(line: 133, column: 47, scope: !42)
!235 = !DILocation(line: 133, column: 58, scope: !42)
!236 = !DILocation(line: 134, column: 3, scope: !42)
!237 = !DILocation(line: 135, column: 7, scope: !42)
!238 = !DILocation(line: 136, column: 7, scope: !42)
!239 = !DILocation(line: 137, column: 12, scope: !240)
!240 = !DILexicalBlockFile(scope: !241, file: !1, discriminator: 1)
!241 = distinct !DILexicalBlock(scope: !242, file: !1, line: 137, column: 3)
!242 = distinct !DILexicalBlock(scope: !42, file: !1, line: 137, column: 3)
!243 = !DILocation(line: 137, column: 3, scope: !240)
!244 = !DILocation(line: 138, column: 33, scope: !245)
!245 = distinct !DILexicalBlock(scope: !241, file: !1, line: 137, column: 25)
!246 = !DILocation(line: 138, column: 12, scope: !245)
!247 = !DILocation(line: 138, column: 9, scope: !245)
!248 = !DILocation(line: 140, column: 8, scope: !42)
!249 = !DILocation(line: 141, column: 1, scope: !42)
!250 = !DILocation(line: 143, column: 34, scope: !54)
!251 = !DILocation(line: 143, column: 44, scope: !54)
!252 = !DILocation(line: 143, column: 57, scope: !54)
!253 = !DILocation(line: 144, column: 33, scope: !54)
!254 = !DILocation(line: 147, column: 7, scope: !255)
!255 = distinct !DILexicalBlock(scope: !54, file: !1, line: 147, column: 7)
!256 = !DILocation(line: 147, column: 30, scope: !255)
!257 = !DILocation(line: 147, column: 7, scope: !54)
!258 = !DILocation(line: 148, column: 46, scope: !259)
!259 = distinct !DILexicalBlock(scope: !255, file: !1, line: 147, column: 47)
!260 = !{!261, !261, i64 0}
!261 = !{!"int", !165, i64 0}
!262 = !DILocation(line: 148, column: 5, scope: !259)
!263 = !DILocation(line: 149, column: 28, scope: !259)
!264 = !DILocation(line: 150, column: 5, scope: !259)
!265 = !DILocation(line: 153, column: 18, scope: !54)
!266 = !DILocation(line: 156, column: 7, scope: !54)
!267 = !DILocation(line: 155, column: 26, scope: !54)
!268 = !DILocation(line: 158, column: 12, scope: !269)
!269 = distinct !DILexicalBlock(scope: !54, file: !1, line: 158, column: 7)
!270 = !DILocation(line: 158, column: 52, scope: !271)
!271 = !DILexicalBlockFile(scope: !269, file: !1, discriminator: 1)
!272 = !DILocation(line: 158, column: 26, scope: !269)
!273 = !DILocation(line: 159, column: 47, scope: !269)
!274 = !DILocation(line: 159, column: 5, scope: !269)
!275 = !DILocation(line: 162, column: 7, scope: !276)
!276 = distinct !DILexicalBlock(scope: !54, file: !1, line: 161, column: 7)
!277 = !DILocation(line: 161, column: 14, scope: !276)
!278 = !DILocation(line: 161, column: 7, scope: !276)
!279 = !DILocation(line: 161, column: 41, scope: !276)
!280 = !DILocation(line: 162, column: 30, scope: !276)
!281 = !DILocation(line: 161, column: 46, scope: !276)
!282 = !DILocation(line: 163, column: 5, scope: !283)
!283 = distinct !DILexicalBlock(scope: !276, file: !1, line: 162, column: 51)
!284 = !DILocation(line: 164, column: 3, scope: !283)
!285 = !DILocation(line: 164, column: 37, scope: !286)
!286 = !DILexicalBlockFile(scope: !287, file: !1, discriminator: 1)
!287 = distinct !DILexicalBlock(scope: !276, file: !1, line: 164, column: 14)
!288 = !DILocation(line: 164, column: 14, scope: !286)
!289 = !DILocation(line: 165, column: 5, scope: !290)
!290 = distinct !DILexicalBlock(scope: !287, file: !1, line: 164, column: 54)
!291 = !DILocation(line: 166, column: 3, scope: !290)
!292 = !DILocation(line: 167, column: 1, scope: !293)
!293 = !DILexicalBlockFile(scope: !54, file: !1, discriminator: 1)
!294 = !DILocation(line: 170, column: 10, scope: !63)
!295 = !DILocation(line: 170, column: 33, scope: !63)
!296 = !DILocation(line: 170, column: 3, scope: !63)
!297 = !DILocation(line: 173, column: 35, scope: !66)
!298 = !DILocation(line: 173, column: 50, scope: !66)
!299 = !DILocation(line: 174, column: 8, scope: !300)
!300 = distinct !DILexicalBlock(scope: !66, file: !1, line: 174, column: 7)
!301 = !DILocation(line: 174, column: 7, scope: !66)
!302 = !DILocation(line: 175, column: 5, scope: !303)
!303 = distinct !DILexicalBlock(scope: !300, file: !1, line: 174, column: 15)
!304 = !DILocation(line: 176, column: 11, scope: !303)
!305 = !DILocation(line: 177, column: 3, scope: !303)
!306 = !DILocation(line: 182, column: 3, scope: !66)
!307 = !DILocation(line: 183, column: 7, scope: !308)
!308 = distinct !DILexicalBlock(scope: !66, file: !1, line: 183, column: 7)
!309 = !DILocation(line: 183, column: 30, scope: !308)
!310 = !DILocation(line: 183, column: 7, scope: !66)
!311 = !DILocation(line: 186, column: 12, scope: !66)
!312 = !DILocation(line: 186, column: 3, scope: !66)
!313 = !DILocation(line: 187, column: 1, scope: !66)
!314 = !DILocation(line: 187, column: 1, scope: !315)
!315 = !DILexicalBlockFile(scope: !66, file: !1, discriminator: 1)
!316 = !DILocation(line: 189, column: 28, scope: !72)
!317 = !DILocation(line: 189, column: 47, scope: !72)
!318 = !DILocation(line: 189, column: 59, scope: !72)
!319 = !DILocation(line: 189, column: 71, scope: !72)
!320 = !DILocation(line: 190, column: 28, scope: !72)
!321 = !DILocation(line: 190, column: 41, scope: !72)
!322 = !DILocation(line: 190, column: 67, scope: !72)
!323 = !DILocation(line: 191, column: 8, scope: !324)
!324 = distinct !DILexicalBlock(scope: !72, file: !1, line: 191, column: 7)
!325 = !DILocation(line: 191, column: 7, scope: !72)
!326 = !DILocation(line: 192, column: 5, scope: !327)
!327 = distinct !DILexicalBlock(scope: !324, file: !1, line: 191, column: 15)
!328 = !DILocation(line: 193, column: 11, scope: !327)
!329 = !DILocation(line: 194, column: 3, scope: !327)
!330 = !DILocation(line: 196, column: 3, scope: !72)
!331 = !DILocation(line: 197, column: 7, scope: !332)
!332 = distinct !DILexicalBlock(scope: !72, file: !1, line: 197, column: 7)
!333 = !DILocation(line: 197, column: 30, scope: !332)
!334 = !DILocation(line: 197, column: 7, scope: !72)
!335 = !DILocation(line: 200, column: 12, scope: !72)
!336 = !DILocation(line: 201, column: 27, scope: !72)
!337 = !DILocation(line: 200, column: 3, scope: !72)
!338 = !DILocation(line: 202, column: 13, scope: !72)
!339 = !DILocation(line: 203, column: 1, scope: !72)
!340 = !DILocation(line: 203, column: 1, scope: !341)
!341 = !DILexicalBlockFile(scope: !72, file: !1, discriminator: 1)
!342 = !DILocation(line: 205, column: 31, scope: !83)
!343 = !DILocation(line: 205, column: 41, scope: !83)
!344 = !DILocation(line: 205, column: 55, scope: !83)
!345 = !DILocation(line: 205, column: 66, scope: !83)
!346 = !DILocation(line: 206, column: 33, scope: !83)
!347 = !DILocation(line: 206, column: 44, scope: !83)
!348 = !DILocation(line: 206, column: 58, scope: !83)
!349 = !DILocation(line: 207, column: 3, scope: !83)
!350 = !DILocation(line: 207, column: 3, scope: !351)
!351 = !DILexicalBlockFile(scope: !83, file: !1, discriminator: 2)
!352 = !DILocation(line: 208, column: 7, scope: !353)
!353 = distinct !DILexicalBlock(scope: !83, file: !1, line: 208, column: 7)
!354 = !DILocation(line: 208, column: 7, scope: !83)
!355 = !DILocation(line: 210, column: 12, scope: !356)
!356 = distinct !DILexicalBlock(scope: !83, file: !1, line: 210, column: 7)
!357 = !DILocation(line: 210, column: 7, scope: !83)
!358 = !DILocation(line: 211, column: 14, scope: !356)
!359 = !DILocation(line: 211, column: 5, scope: !356)
!360 = !DILocation(line: 212, column: 17, scope: !361)
!361 = distinct !DILexicalBlock(scope: !356, file: !1, line: 212, column: 12)
!362 = !DILocation(line: 213, column: 14, scope: !361)
!363 = !DILocation(line: 212, column: 12, scope: !356)
!364 = !DILocation(line: 213, column: 5, scope: !361)
!365 = !DILocation(line: 215, column: 5, scope: !361)
!366 = !DILocation(line: 216, column: 7, scope: !367)
!367 = distinct !DILexicalBlock(scope: !83, file: !1, line: 216, column: 7)
!368 = !DILocation(line: 217, column: 14, scope: !367)
!369 = !DILocation(line: 216, column: 7, scope: !83)
!370 = !DILocation(line: 217, column: 5, scope: !367)
!371 = !DILocation(line: 219, column: 5, scope: !367)
!372 = !DILocation(line: 220, column: 7, scope: !373)
!373 = distinct !DILexicalBlock(scope: !83, file: !1, line: 220, column: 7)
!374 = !DILocation(line: 221, column: 14, scope: !373)
!375 = !DILocation(line: 220, column: 7, scope: !83)
!376 = !DILocation(line: 221, column: 5, scope: !373)
!377 = !DILocation(line: 223, column: 5, scope: !373)
!378 = !DILocation(line: 224, column: 1, scope: !83)
!379 = !DILocation(line: 226, column: 31, scope: !97)
!380 = !DILocation(line: 226, column: 41, scope: !97)
!381 = !DILocation(line: 226, column: 56, scope: !97)
!382 = !DILocation(line: 226, column: 67, scope: !97)
!383 = !DILocation(line: 227, column: 33, scope: !97)
!384 = !DILocation(line: 227, column: 44, scope: !97)
!385 = !DILocation(line: 227, column: 58, scope: !97)
!386 = !DILocation(line: 228, column: 3, scope: !97)
!387 = !DILocation(line: 228, column: 3, scope: !388)
!388 = !DILexicalBlockFile(scope: !97, file: !1, discriminator: 2)
!389 = !DILocation(line: 229, column: 7, scope: !390)
!390 = distinct !DILexicalBlock(scope: !97, file: !1, line: 229, column: 7)
!391 = !DILocation(line: 229, column: 7, scope: !97)
!392 = !DILocation(line: 231, column: 12, scope: !393)
!393 = distinct !DILexicalBlock(scope: !97, file: !1, line: 231, column: 7)
!394 = !DILocation(line: 231, column: 7, scope: !97)
!395 = !DILocation(line: 232, column: 14, scope: !393)
!396 = !DILocation(line: 232, column: 5, scope: !393)
!397 = !DILocation(line: 233, column: 17, scope: !398)
!398 = distinct !DILexicalBlock(scope: !393, file: !1, line: 233, column: 12)
!399 = !DILocation(line: 234, column: 14, scope: !398)
!400 = !DILocation(line: 233, column: 12, scope: !393)
!401 = !DILocation(line: 234, column: 5, scope: !398)
!402 = !DILocation(line: 236, column: 5, scope: !398)
!403 = !DILocation(line: 237, column: 7, scope: !404)
!404 = distinct !DILexicalBlock(scope: !97, file: !1, line: 237, column: 7)
!405 = !DILocation(line: 238, column: 14, scope: !404)
!406 = !DILocation(line: 237, column: 7, scope: !97)
!407 = !DILocation(line: 238, column: 5, scope: !404)
!408 = !DILocation(line: 240, column: 5, scope: !404)
!409 = !DILocation(line: 241, column: 7, scope: !410)
!410 = distinct !DILexicalBlock(scope: !97, file: !1, line: 241, column: 7)
!411 = !DILocation(line: 242, column: 14, scope: !410)
!412 = !DILocation(line: 241, column: 7, scope: !97)
!413 = !DILocation(line: 242, column: 5, scope: !410)
!414 = !DILocation(line: 244, column: 5, scope: !410)
!415 = !DILocation(line: 245, column: 1, scope: !97)
!416 = !DILocation(line: 247, column: 34, scope: !109)
!417 = !DILocation(line: 247, column: 44, scope: !109)
!418 = !DILocation(line: 247, column: 57, scope: !109)
!419 = !DILocation(line: 247, column: 68, scope: !109)
!420 = !DILocation(line: 248, column: 36, scope: !109)
!421 = !DILocation(line: 248, column: 47, scope: !109)
!422 = !DILocation(line: 248, column: 61, scope: !109)
!423 = !DILocation(line: 249, column: 3, scope: !109)
!424 = !DILocation(line: 249, column: 3, scope: !425)
!425 = !DILexicalBlockFile(scope: !109, file: !1, discriminator: 2)
!426 = !DILocation(line: 250, column: 7, scope: !427)
!427 = distinct !DILexicalBlock(scope: !109, file: !1, line: 250, column: 7)
!428 = !DILocation(line: 250, column: 7, scope: !109)
!429 = !DILocation(line: 252, column: 12, scope: !430)
!430 = distinct !DILexicalBlock(scope: !109, file: !1, line: 252, column: 7)
!431 = !DILocation(line: 252, column: 7, scope: !109)
!432 = !DILocation(line: 253, column: 14, scope: !430)
!433 = !DILocation(line: 253, column: 5, scope: !430)
!434 = !DILocation(line: 254, column: 17, scope: !435)
!435 = distinct !DILexicalBlock(scope: !430, file: !1, line: 254, column: 12)
!436 = !DILocation(line: 255, column: 14, scope: !435)
!437 = !DILocation(line: 254, column: 12, scope: !430)
!438 = !DILocation(line: 255, column: 5, scope: !435)
!439 = !DILocation(line: 257, column: 5, scope: !435)
!440 = !DILocation(line: 258, column: 7, scope: !441)
!441 = distinct !DILexicalBlock(scope: !109, file: !1, line: 258, column: 7)
!442 = !DILocation(line: 259, column: 14, scope: !441)
!443 = !DILocation(line: 258, column: 7, scope: !109)
!444 = !DILocation(line: 259, column: 5, scope: !441)
!445 = !DILocation(line: 261, column: 5, scope: !441)
!446 = !DILocation(line: 262, column: 7, scope: !447)
!447 = distinct !DILexicalBlock(scope: !109, file: !1, line: 262, column: 7)
!448 = !DILocation(line: 263, column: 14, scope: !447)
!449 = !DILocation(line: 262, column: 7, scope: !109)
!450 = !DILocation(line: 263, column: 5, scope: !447)
!451 = !DILocation(line: 265, column: 5, scope: !447)
!452 = !DILocation(line: 266, column: 1, scope: !109)
!453 = !DILocation(line: 268, column: 34, scope: !121)
!454 = !DILocation(line: 268, column: 44, scope: !121)
!455 = !DILocation(line: 268, column: 59, scope: !121)
!456 = !DILocation(line: 268, column: 70, scope: !121)
!457 = !DILocation(line: 269, column: 36, scope: !121)
!458 = !DILocation(line: 269, column: 47, scope: !121)
!459 = !DILocation(line: 269, column: 61, scope: !121)
!460 = !DILocation(line: 270, column: 3, scope: !121)
!461 = !DILocation(line: 270, column: 3, scope: !462)
!462 = !DILexicalBlockFile(scope: !121, file: !1, discriminator: 2)
!463 = !DILocation(line: 271, column: 7, scope: !464)
!464 = distinct !DILexicalBlock(scope: !121, file: !1, line: 271, column: 7)
!465 = !DILocation(line: 271, column: 7, scope: !121)
!466 = !DILocation(line: 273, column: 22, scope: !121)
!467 = !DILocation(line: 273, column: 24, scope: !121)
!468 = !DILocation(line: 273, column: 3, scope: !121)
!469 = !DIExpression(DW_OP_deref)
!470 = !DILocation(line: 273, column: 8, scope: !121)
!471 = !DILocation(line: 274, column: 50, scope: !121)
!472 = !DILocation(line: 274, column: 3, scope: !121)
!473 = !DILocation(line: 275, column: 12, scope: !474)
!474 = distinct !DILexicalBlock(scope: !121, file: !1, line: 275, column: 7)
!475 = !DILocation(line: 275, column: 7, scope: !121)
!476 = !DILocation(line: 276, column: 14, scope: !474)
!477 = !DILocation(line: 276, column: 5, scope: !474)
!478 = !DILocation(line: 277, column: 17, scope: !479)
!479 = distinct !DILexicalBlock(scope: !474, file: !1, line: 277, column: 12)
!480 = !DILocation(line: 278, column: 14, scope: !479)
!481 = !DILocation(line: 277, column: 12, scope: !474)
!482 = !DILocation(line: 278, column: 5, scope: !479)
!483 = !DILocation(line: 280, column: 5, scope: !479)
!484 = !DILocation(line: 281, column: 7, scope: !485)
!485 = distinct !DILexicalBlock(scope: !121, file: !1, line: 281, column: 7)
!486 = !DILocation(line: 282, column: 14, scope: !485)
!487 = !DILocation(line: 281, column: 7, scope: !121)
!488 = !DILocation(line: 282, column: 5, scope: !485)
!489 = !DILocation(line: 284, column: 5, scope: !485)
!490 = !DILocation(line: 285, column: 7, scope: !491)
!491 = distinct !DILexicalBlock(scope: !121, file: !1, line: 285, column: 7)
!492 = !DILocation(line: 286, column: 14, scope: !491)
!493 = !DILocation(line: 285, column: 7, scope: !121)
!494 = !DILocation(line: 286, column: 5, scope: !491)
!495 = !DILocation(line: 288, column: 5, scope: !491)
!496 = !DILocation(line: 289, column: 1, scope: !121)
!497 = !DILocation(line: 289, column: 1, scope: !498)
!498 = !DILexicalBlockFile(scope: !121, file: !1, discriminator: 1)
